# Auto detect text files and perform LF normalization



text.c


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<time.h>
#include"game.h"



void menu()
{
	printf("*************************************\n");
	printf("**********      1.play      *********\n");
	printf("**********      0.exit      *********\n");
	printf("*************************************\n");

}

void game()
{
	char board[ROW][COL];
	char ret = 0; 
	init_board(board, ROW, COL);
	display_board(board,ROW,COL);
	srand((unsigned int)time(NULL));
	while(1)   
	{        
		player_move(board, ROW, COL);     
		if((ret = win(board, ROW, COL)) != ' ')       
			break;       
		display_board(board, ROW, COL);         
		computor_move(board, ROW, COL);        
	 if((ret = win(board, ROW, COL)) != ' ')           
		 break;        
	 display_board(board, ROW, COL); 
	}   
	if(ret == 'X')     
	{        
		printf("Game player to win\n");  
	}     
	else if(ret == '0')  
		;
  
	   else if(ret == 'q')    
	   {        
		   printf("Ends in a draw\n"); 
	}     
	display_board(board, ROW, COL); 

}

void text()
{
	int input = 0;
	
	do
	{
	  menu();
	  printf("Please select:>");
	  scanf("%d",&input);
	 
	  switch(input)
	  {
		  case 1:
			  game();
			  break;
		  case 0:
			  break;
		  default:
			  printf("Error selected,please select again\n");
			  break;
	  }
	

	}while(input);
	

}

int main()
{
	text();
	return 0;
}


game.h

#ifndef _GAME_H__
#define _GAME_H__
#define COL 3
#define ROW 3
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
void init_board(char board[ROW][COL],int row,int cow);
void display_board(char board[ROW][COL], int row, int col);
void player_move(char board[ROW][COL], int row, int col);
char win(char board[ROW][COL],int row,int col);
static int is_full(char board[ROW][COL], int row, int col);
void computor_move(char board[ROW][COL],int row,int col);
char win(char board[ROW][COL],int row,int col);
static int is_full(char board[ROW][COL], int row, int col);
#endif  //_GAME_H__



game.c

#define _CRT_SECURE_NO_WARNINGS 1


#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#include"game.h"
#include<stdlib.h>


//Initialize array
void init_board(char board[ROW][COL],int row,int cow)
{
	int i = 0;
	int j = 0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<cow;j++)
		{
			board[i][j]=' ';
		}
	}
	
}

void display_board(char board[ROW][COL], int row, int col)
{ 
	int i = 0;
	for(i=0; i<row; i++)
	{        
		printf(" %c | %c | %c \n",
			board[i][0],board[i][1],board[i][2]);
		if(i != 2)
			printf("---|---|---\n");
	}
}

void computor_move(char board[ROW][COL],int row,int col)
{
	while(1)
	{
	  int x = rand()%3;
	  int y = rand()%3;
	  if(board[x][y] == ' ')
	  {             
		  board[x][y] = '0';            
		  break;        
	  }     
    }
}

void player_move(char board[ROW][COL], int row, int col)

{
	int x = 0;
	int y = 0;
	
	while(1)
	{
		printf("Please input the coordinates lazi:\n");
	
		scanf("%d%d",&x,&y);
	 
		x--;         
	 
		y--; 
	    if(((x>=0)&&(x<=2))&&((y>=0)&&(y<=2)))
	    {
		     if(board[x][y] == ' ')
		     {                 
			     board[x][y] = 'X';                
			     break;            
		     }
		     else
			     printf("Subscript incorrect,please reenter");
	    }
	    else
		    printf("Subscript incorrect,please reenter");
	}

}


static int is_full(char board[ROW][COL], int row, int col)
{     
	int i = 0;    
	int j = 0;     
	for(i=0; i<row; i++)   
	{         
		for(j=0; j<col; j++)       
		{            
			if(board[i][j] == ' ')          
				return 0;     
		}  
	}   
	return 1;
}
char win(char board[ROW][COL],int row,int col)
{
	    int i = 0;
		for(i=0; i<row; i++)
		{         
			if((board[i][0]==board[i][1]) 
				&&(board[i][1]==board[i][2])         
				&&(board[i][1]!=' '))            
				return board[i][1];    
		}    
		for(i=0; i<col; i++)    
		{        
			if((board[0][i]==board[1][i]) 
         &&(board[1][i]==board[2][i])         
		 &&(board[1][i]!=' '))            
		 return board[1][i];   
		} 
 
       if((board[0][0]==board[1][1])        
		   &&(board[1][1]==board[2][2])         
		   &&(board[1][1]!=' '))        
		   return board[1][1]; 
 
       if((board[0][2]==board[1][1])
		   &&(board[1][1]==board[2][0])        
		   &&(board[1][1]!=' '))       
		   return board[1][1]; 
 
       if(is_full(board, row, col))  
	   {         
		   return 'q';   
	   }    
	   return ' ';

}